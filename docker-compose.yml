version: "3.7"

services:
  gateway:
    image: openmrs/openmrs-reference-application-3-gateway:3.4.0
    restart: "unless-stopped"
    depends_on:
      - frontend
      - backend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./gateway/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certs:/etc/nginx/certs:ro

  frontend:
    image: openmrs/openmrs-reference-application-3-frontend:3.4.0
    restart: "unless-stopped"
    environment:
      SPA_PATH: /openmrs/spa
      API_URL: /openmrs
      SPA_CONFIG_URLS: /openmrs/spa/config/implementer.json
      SPA_DEFAULT_LOCALE: en
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      timeout: 5s
    depends_on:
      - backend
    volumes:
      - ./branding/config:/usr/share/nginx/html/config:ro
      - ./branding/assets:/usr/share/nginx/html/assets:ro

  backend:
    image: openmrs/openmrs-reference-application-3-backend:3.4.0
    restart: "unless-stopped"
    depends_on:
      - db
    environment:
      OMRS_CONFIG_MODULE_WEB_ADMIN: "true"
      OMRS_CONFIG_AUTO_UPDATE_DATABASE: "true"
      OMRS_CONFIG_CREATE_TABLES: "true"
      OMRS_CONFIG_CONNECTION_SERVER: db
      OMRS_CONFIG_CONNECTION_DATABASE: openmrs
      OMRS_CONFIG_CONNECTION_USERNAME: ${OMRS_DB_USER:-openmrs}
      OMRS_CONFIG_CONNECTION_PASSWORD: ${OMRS_DB_PASSWORD:-openmrs}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/openmrs"]
      timeout: 5s
    volumes:
      - openmrs-data:/openmrs/data
      - ./forms:/openmrs/data/forms
      - ./openmrs-data/log4j2.xml:/openmrs/data/log4j2.xml:ro
      - ./openmrs-data/openmrs.properties:/openmrs/data/openmrs.properties:ro

  db:
    image: mysql:latest
    restart: "unless-stopped"
    command: "mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_general_ci"
    healthcheck:
      test: "mysql --user=${OMRS_DB_USER:-openmrs} --password=${OMRS_DB_PASSWORD:-openmrs} --execute \"SHOW DATABASES;\""
      interval: 3s
      timeout: 1s
      retries: 5
    environment:
      MYSQL_DATABASE: openmrs
      MYSQL_USER: ${OMRS_DB_USER:-openmrs}
      MYSQL_PASSWORD: ${OMRS_DB_PASSWORD:-openmrs}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-openmrs}
    volumes:
      - db-data:/var/lib/mysql

  postgresqldb:
    image: postgis/postgis:13-3.3
    environment:
      POSTGRES_DB: dhis2
      POSTGRES_USER: dhis
      POSTGRES_PASSWORD: dhis
    volumes:
      - pg-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "dhis", "-d", "dhis2"]
      interval: 5s
      timeout: 5s
      retries: 5
#########Jasper Reporting
  jasperdb:
    image: postgres:14
    restart: unless-stopped
    environment:
      POSTGRES_USER: jasper
      POSTGRES_PASSWORD: changeMeStrong!
      POSTGRES_DB: jasperserver
    volumes:
      - jasper-pg-data:/var/lib/postgresql/data

  jasperserver:
    image: kornelbrenkacz/jasperreports
    restart: unless-stopped
    depends_on:
      - jasperdb
    environment:
      DB_TYPE: postgresql
      DB_HOST: jasperdb
      DB_PORT: 5432
      DB_NAME: jasperserver
      DB_USERNAME: jasper
      DB_PASSWORD: jasper
    # Optional: expose for direct testing; the gateway will reverse-proxy it anyway
    ports:
      - "8081:8080"   # http://<host>:8081/jasperserver
    volumes:
      # Persist Jasper app data (orgs, schedules, temp, exports)
      - jasper-server-data:/usr/local/share/jasperserver
      # Provide MySQL JDBC driver so Jasper can connect to your OpenMRS DB
      - ./jasper/drivers/mysql-connector-j-8.0.33.jar:/usr/local/tomcat/webapps/jasperserver/WEB-INF/lib/mysql-connector-j-8.0.33.jar:ro
##########End of Jasper Reporting
  # dhis2:
  #   image: dhis2/core:2.40
  #   ports:
  #     - "8090:8080"
  #   volumes:
  #     - ./dhis2-data:/data
  #     - ./dhis.conf:/data/dhis.conf:ro
  #   environment:
  #     - DHIS2_HOME=/data
  #     - DHIS2_DATABASE_HOST=postgresqldb
  #     - DHIS2_DATABASE_NAME=dhis2
  #     - DHIS2_DATABASE_USERNAME=dhis
  #     - DHIS2_DATABASE_PASSWORD=dhis
  #   depends_on:
  #     - postgresqldb

  # portainer:
  #   image: portainer/portainer-ce:latest
  #   container_name: portainer
  #   restart: unless-stopped
  #   ports:
  #     - "8000:8000"
  #     - "9443:9443"
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - portainer_data:/data
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:9443"]
  #     timeout: 5s

volumes:
  openmrs-data: ~
  db-data: ~
  # portainer_data: ~
  # dhis2-data: ~
  pg-data: ~
  jasper-pg-data: ~
  jasper-server-data: ~
